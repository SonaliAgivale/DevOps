1) #first launch a instance on aws and access server on 
	t2medium
2)#Create a IAM user role in aws with administration access
3) Install aws cli 
	sudo apt-get update
	sudo apt-get install awscli -y
	aws --version
4)do aws configure
	add user user credential assess key and secreate key 

move to sudo su (root)

5)
 #install eksctl and kubectl for creating cluster and pods
   #link for installing : https://www.hackerxone.com/2021/08/20/steps-to-install-kubectl-eksctl-on-ubuntu-20-04/
   https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html
   #installing kubectl:
   apt-get update
   curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
   chmod +x ./kubectl
   mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
   kubectl version --short --client




6)
 #installing eksctl
     apt-get update
     curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
     mv /tmp/eksctl /usr/local/bin
     eksctl version 
	 
7)
#Create cluster 
sudo eksctl create cluster \
 --name Kubernetes-cluster \
 --region us-east-1 \   //select your region
 --zones us-east-1a,us-east-1b,us-east-1c \  //you have to put your subnets zone
 --version 1.21\
 --managed \
 --nodegroup-name workergroup \
 --node-type t3.small \
 --nodes-min 1 \
 --nodes-max 4 \
 --node-volume-size 20 \
 --ssh-access \
 --ssh-public-key aws-keypair \
 --asg-access \
 --external-dns-access \
 --full-ecr-access \
 --kubeconfig /home/ubuntu/.kube/config
----------------------------------------------------
2nd way to create cluster
{sudo eksctl create cluster --name Kubernetes-cluster --region us-east-1 --zones us-east-1c,us-east-1a,us-east-1b,us-east-1d --version 1.21 --managed --nodegroup-name workergroup --node-type t3.small --nodes-min 1 --nodes-max 4 --node-volume-size 20  --ssh-access  --ssh-public-key /home/ubuntu/.ssh/id_rsa.pub --asg-access --external-dns-access --full-ecr-access --kubeconfig /home/ubuntu/.kube/config}

Note:If you got following error
Error: checking AWS STS access â€“ cannot get role ARN for current session: operation error STS: GetCallerIdentity, failed to sign request: failed to retrieve credentials: failed to refresh cached credentials, no EC2 IMDS role found, operation error ec2imds: GetMetadata, http response error StatusCode: 404, request to EC2 IMDS failed
Solution: Then you have do aws confugure(Security credential-> generate access key)

Error: cannot find EC2 key pair "/home/ubuntu/.ssh/id_rsa.pub"
you have to generate ssh-key gen
8)	sudo snap install kubectl --classic
	kubectl get nodes ---- > do aws configure before to that
	aws eks list-clusters
	kubectl get svc
	
	
	if option number 8 commands will not work or if you get error like
	------------------------------------------
	root@ip-10-0-2-244:/home/ubuntu# kubectl get nodes
The connection to the server localhost:8080 was refused - did you specify the right host or port?
root@ip-10-0-2-244:/home/ubuntu# aws eks list-clusters
{
    "clusters": [
        "Kubernetes-cluster"
    ]
}
root@ip-10-0-2-244:/home/ubuntu# kubectl get svc
The connection to the server localhost:8080 was refused - did you specify the right host or port?
---------------------------------------------------------------------------------
	solution : aws eks update-kubeconfig --region regionname --name clustername

9)kubectl get nodes
  eksctl get cluster
  #if u want to delete your cluster then do
    eksctl delete cluster --name=clusterName 
10)#create deplpyment and service set for database
  sudo nano database.yml
*******************************database.yml***********************************************
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: moshtab/database_imageupdated:latest
        resources:
              limits:
                cpu: 500m
              requests:
                cpu: 200m


---
kind: Service
apiVersion: v1
metadata:
  name: database-service
spec:
  selector:
    app: mysql
  type: ClusterIP
  ports:
    - name: mysql
      port: 3306
      targetPort: 3306
***********************************************************************************************
kubectl apply -f database.yml
kubectl get pods
11)#create deployement and service set for backend
  #Note:- The backend Image should contain the host name as the name of database service
   sundo nano backend.yml
************************************backend.yml******************************************************
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  labels:
    app: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  strategy:
    type: Recreate

  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: moshtab/backend_imageupdated:latest
          imagePullPolicy: Always
          ports:
            - name: tcp
              containerPort: 8000
          resources:
              limits:
                cpu: 500m
              requests:
                cpu: 200m

---
kind: Service
apiVersion: v1
metadata:
  name: backend
spec:
  selector:
    app: backend
  type: ClusterIP
  ports:
    - name: backend
      port: 8000
      targetPort: 8000
****************************************************************************************
kubectl apply -f backend.yml
kubectl get pods
kubectl describe pod podName
12)#To enter into a backend pod and check whether the application is running or not 
   kubectl exec -it NameOfPod -- /bin/bash     (NameOfPod will get from: kubectl get pods)
   curl http://localhost:8000
#If it shows connection refused to connect 8000 port then do (ps -elf)
   python manage.py runserver
#Then u can see the error like it is not connecting to your database service, so change the database service name as host name in settings.py
then apply it again for database service
   kubectl apply -f database.yml
13)#create deployement,service and configMap set for frontend
  #Note:- In frontend image it should have the proxypass as the backend service name
sudo nano frontend.yml
*****************************frontend.yml***********************************************************************
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  strategy:
    type: Recreate

  template:
    metadata:
      labels:
        app: frontend
    spec:
      restartPolicy: Always
      containers:
      - name: frontend
        image: nginx:latest
        imagePullPolicy: Always
        volumeMounts:
          - name: chatapp
            mountPath: /etc/nginx/conf.d/
            readOnly: true
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: 500m
          requests:
            cpu: 200m
      volumes:
      - name: chatapp
        configMap:
          name: configmap
---
kind: Service
apiVersion: v1
metadata:
  name: frontend
spec:
  selector:
    app: frontend
  type: ClusterIP
  ports:
    - name: frontend
      port: 80
      targetPort: 80
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: configmap
spec:
data:
  nginxconf.conf: |
      server {
      listen 80 ;
      server_name _default;
      root /new_chatapp/fundoo;
      location / {
      proxy_pass http://backend:8000;
      }
      }
************************************************************************************************************************************
kubectl apply -f frontend.yml
kubectl get pods
14)#To enter into a frontend pod and check whether the application is running or not 
    kubectl exec -it NameOfPod -- /bin/bash     (NameOfPod will get from: kubectl get pods)
    curl http://localhost
#If it shows connection refused to connect 80 port then do 
#Check your nginx config syntax:
   nginx -t
#If you get an error, you would need to fix that problem like your having incorrect proxypass in nginx configuration in sites-available folder  and then you could restart nginx:
   apt install systemctl
   systemctl restart nginx
   systemctl status nginx
#For trubleshooting nginx server link: https://www.digitalocean.com/community/questions/how-to-troubleshoot-common-nginx-issues-on-linux-server
   
#If you get Syntax OK when running nginx -t then your confiruation is correct, so I would recommend checking your error logs:
   tail -f /var/log/nginx/error.log
15)#Create a domain from freenom
   #Link: https://my.freenom.com/clientarea.php?action=domains
   #watch this video for creation of domain
   #https://youtu.be/3Uopc4AFjOY 
16)After creation of domain configure it by creating a hosted zone in route 53 and copy four servers from route 53 to freenom (Manage Domain-Management tools-Nameservers-Use Custom name servers-change Nameservers)

17) #Now install Ingress-Controller 
      kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.0/deploy/static/provider/cloud/deploy.yaml
18) #Create ingress to access your application from outside world
      sudo nano ingress.yml
*******************************************************ingress.yml******************************************************************
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
  annotations:
    kubernetes.io/ingress.class: nginx

spec:
 rules:
 - host: www.sonich.tk
   http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80
**************************************************************************************************************************
kubectl apply -f ingress.yml
19) Now go to route 53 and create a record in that click on alias,select Application Load Balancer, select DNS of LB.
20)#Now check by 
    curl www.moshtab.tk
#or check on browser
  www.moshtab.tk

21)#For AutoScaling Install Metric Server
   #link:  https://docs.aws.amazon.com/eks/latest/userguide/metrics-server.html
    kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
    kubectl get deployment metrics-server -n kube-system
   #paste resources in spec like (You can skip this step)
    resources:
              limits:
                cpu: 500m
              requests:
                cpu: 200m
   
22)#for horizontal pod autoscaling do 
     kubectl autoscale deployment frontend --cpu-percent=50 --min=1 --max=10
23)#Now go to duplicate session and increase the load by 
kubectl run -i --tty load-generator --rm --image=busybox --restart=Never -- /bin/sh -c "while sleep 0.01; do wget -q -O- http://frontend; done" 
24)#Now come to Main session and check whether the pods are increasing or not by
     kubectl get hpa
